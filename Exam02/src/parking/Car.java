package parking;

/*
 
<< 문제 >>



1. 다음 구성요소를 가지는 Car 클래스를 구현하시오.

 

    1) field

        (1) String carNo : 차량번호

        (2) String model : 차량모델

 

    2) constructor

        모든 필드값을 매개변수로 전달 받아서 필드 초기화를 진행하는 생성자

 

    3) method

        (1) getter

        (2) setter

        (3) toString()

 

 

 

2. Car 클래스의 생성자와 메소드는 롬복(lombok) 라이브러리를 이용해서 생성하시오.

    롬복(lombok) 라이브러리 설치 및 설정에 실패하는 경우 롬복(lombok) 라이브러리가 지원하는 애너테이션을 사용하지 말고 일반 코드로 작업을 수행하시오.

 

 

 

3. 주차장을 의미하는 ParkingLot 클래스를 구현하시오.

 

    1) field

        (1) String name : 주차장이름

        (2) Car[] cars : Car 인스턴스를 저장할 수 있는 배열

        (3) int idx : 배열의 인덱스

        (4) Scanner sc : 키보드 입력을 처리하는 인스턴스

 

    2) constructor

        매개변수로 주차장이름을 전달 받아서 필드를 초기화하고,

        길이가 10인 cars 배열을 생성하고,

        키보드로부터 정보를 입력 받을 수 있는 sc 인스턴스를 생성한다.

 

    3) public void addCar() { }

        (1) 가장 먼저 "현재 등록된 차량 0대"와 같은 메시지를 출력한다.

        (2) 주차장이 가득찬 경우 "더 이상 차량 등록이 불가능합니다." 메시지를 출력하고 addCar() 메소드를 종료한다.

        (3) sc 인스턴스를 이용해서 차량번호와 모델명을 입력 받은 뒤 cars 배열에 순차적으로 저장한다.

        (4) 차량번호와 모델명은 공백 없는 문자열로 처리한다.

        (5) 차량번호가 "288러1111"과 같은 차량의 등록이 성공하면 "차량번호 288러1111 차량이 등록되었습니다." 메시지를 출력한다.

        (6) 기타 명시되지 않은 예외는 발생하지 않는 것으로 가정한다.

 

    4) public void deleteCar() { }

        (1) 주차장이 비어 있는 경우 "등록된 차량이 없습니다." 메시지를 출력하고 deleteCar() 메소드를 종료한다.

        (2) sc 인스턴스를 이용해서 제거할 차량번호를 입력 받은 뒤 해당 차량번호와 일치하는 정보를 삭제한다.

        (3) 차량번호가 "288러1111"인 차량을 삭제한 경우 "차량번호 288러1111 차량이 삭제되었습니다." 메시지를 출력한다.

        (4) 입력된 차량번호와 일치하는 정보가 없는 경우 "대상 차량이 존재하지 않습니다." 메시지를 출력한다.

 

    5) public void printAllCars() { }

        (1) 주차장이 비어 있는 경우 "등록된 차량이 없습니다." 메시지를 출력하고 printAllCars() 메소드를 종료한다.

        (2) 가장 먼저 주차장이름을 출력한다.

        (3) 저장된 모든 차량(cars) 정보를 System.out.println() 메소드를 이용해서 출력한다.

 

    6) public void manage() { }

        (1) "1.추가 2.삭제 3.전체 0.종료" 메뉴를 운용한다.

        (2) 무한루프 내부에서 사용자 입력(1,2,3,0)에 따라서 적절한 메소드를 호출한다.

        (3) 잘못된 메뉴를 입력한 경우 "존재하지 않는 메뉴입니다." 메시지를 출력한다.

 

 

 

4. main 메소드를 가지고 있는 ParkingLotMain 클래스를 작성하시오. main 메소드에서는 임의의 ParkingLot 인스턴스를 생성한 뒤 manage 메소드를 호출하시오.

    ParkingLot 인스턴스 생성시 주차장의 이름은 "대박주차장"으로 처리하시오.

 

 

 

<< 실행 예시 >>

 

(빨간 글씨로 표시된 부분은 sc 인스턴스를 이용해서 사용자가 입력하는 데이터를 의미한다.)

 

------------------------------------------------------------------------------

 

 

1.추가 2.삭제 3.전체 0.종료 >>> 1

현재 등록된 차량 0대

차량번호 >>> 111거1111

모델 >>> sonata

 

1.추가 2.삭제 3.전체 0.종료 >>> 1

현재 등록된 차량 1대

차량번호 >>> 222너2222

모델 >>> K5

 

1.추가 2.삭제 3.전체 0.종료 >>> 1

현재 등록된 차량 2대

차량번호 >>> 333더3333

모델 >>> SM5

 

1.추가 2.삭제 3.전체 0.종료 >>> 3

대박주차장 차량 목록

Car(carNo=111거1111, model=sonata)

Car(carNo=222너2222, model=K5)

Car(carNo=333더3333, model=SM5)

 

1.추가 2.삭제 3.전체 0.종료 >>> 2

제거할 차량번호 >>> 111거1111

차량번호 111거1111 차량이 삭제되었습니다.

 

1.추가 2.삭제 3.전체 0.종료 >>> 2

제거할 차량번호 >>> 999호9999

대상 차량이 존재하지 않습니다.

 

 

(* 존재하지 않는 메뉴)

1.추가 2.삭제 3.전체 0.종료 >>> 5

존재하지 않는 메뉴입니다.

 

(* 주차장이 가득 찬 경우)

1.추가 2.삭제 3.전체 0.종료 >>> 1

더 이상 차량 등록이 불가능합니다.

 

(* 주차장이 비어 있는 경우)

1.추가 2.삭제 3.전체 0.종료 >>> 2

등록된 차량이 없습니다.

 

(* 주차장이 비어 있는 경우)

1.추가 2.삭제 3.전체 0.종료 >>> 3

등록된 차량이 없습니다.


 */

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@AllArgsConstructor
@Getter
@Setter
@ToString


public class Car {

	
	private String carNo;
	private String model;
	
	
}
